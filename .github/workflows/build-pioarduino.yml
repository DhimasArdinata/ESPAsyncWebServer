# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build (pioarduino)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release/*
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  platformio-esp32-arduino-3:
    name: PIO Arduino 3
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
          - esp32dev
          - esp32-s2-saola-1
          - esp32-s3-devkitc-1
          - esp32-c3-devkitc-02
          - esp32-c6-devkitc-1
          - esp32-h2-devkitm-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-pio
          path: |
            ~/.cache/pip
            ~/.platformio

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install PIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Build Examples
        run: |
          for i in `ls examples`; do
            echo "============================================================="
            echo "Building examples/$i..."
            echo "============================================================="
            PLATFORMIO_SRC_DIR=examples/$i PIO_BOARD=${{ matrix.board }} pio run -e ci-arduino-3
          done

  platformio-esp32-arduino2:
    name: PIO Arduino 2
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
          - esp32dev
          - esp32-s2-saola-1
          - esp32-s3-devkitc-1
          - esp32-c3-devkitc-02

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-pio
          path: |
            ~/.cache/pip
            ~/.platformio

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install PIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Build Examples
        run: |
          for i in `ls examples`; do
            echo "============================================================="
            echo "Building examples/$i..."
            echo "============================================================="
            PLATFORMIO_SRC_DIR=examples/$i PIO_BOARD=${{ matrix.board }} pio run -e ci-arduino-2
          done

  platformio-specials:
    name: PIO No Json
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env:
          - ci-arduino-3-latest-asynctcp
          - ci-arduino-3-no-json

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-pio
          path: |
            ~/.cache/pip
            ~/.platformio

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install PIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Build Examples
        run: |
          for i in `ls examples`; do
            echo "============================================================="
            echo "Building examples/$i..."
            echo "============================================================="
            PLATFORMIO_SRC_DIR=examples/$i PIO_BOARD=esp32dev pio run -e ${{ matrix.env }}
          done

  platformio-esp8266:
    name: PIO ESP8266
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
          - huzzah
          - d1_mini

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-pio
          path: |
            ~/.cache/pip
            ~/.platformio

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install PIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Build Examples
        run: |
          for i in `ls examples`; do
            echo "============================================================="
            echo "Building examples/$i..."
            echo "============================================================="
            PLATFORMIO_SRC_DIR=examples/$i PIO_BOARD=${{ matrix.board }} pio run -e ci-esp8266
          done

  platformio-rp2040:
    name: PIO RP2040
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
          - rpipicow

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-pio
          path: |
            ~/.cache/pip
            ~/.platformio

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install PIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Build Examples
        run: |
          for i in `ls examples`; do
            echo "============================================================="
            echo "Building examples/$i..."
            echo "============================================================="
            PLATFORMIO_SRC_DIR=examples/$i PIO_BOARD=${{ matrix.board }} pio run -e ci-raspberrypi
          done

  report-success:
    name: Report Build (Arduino) success
    runs-on: ubuntu-latest
    needs: [platformio-esp32-arduino-3, platformio-esp32-arduino2, platformio-specials, platformio-esp8266, platformio-rp2040]
    steps:
      - name: Report success
        uses: actions/github-script@v7
        with:
          script: |
            const owner = '${{ github.repository_owner }}';
            const repo = '${{ github.repository }}'.split('/')[1];
            const sha = '${{ github.sha }}';
            core.debug(`owner: ${owner}`);
            core.debug(`repo: ${repo}`);
            core.debug(`sha: ${sha}`);
            const { context: name, state } = (await github.rest.repos.createCommitStatus({
              context: 'Build (pioarduino)',
              description: 'Build (pioarduino) successful',
              owner: owner,
              repo: repo,
              sha: sha,
              state: 'success',
              target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })).data;
            core.info(`${name} is ${state}`);
        